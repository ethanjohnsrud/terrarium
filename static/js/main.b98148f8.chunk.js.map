{"version":3,"sources":["Background/terrarium-buddies.jpg","Menu/frog-logo.png","App.js","reportWebVitals.js","index.js"],"names":["App","screenSaverRef","useRef","deactivateScreenSaver","current","useEffect","window","addEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialImage","IMAGE_INTERVAL","TRANSITION_INTERVAL","SCREENSAVER_INACTIVE_TIME","location","defaultImage","isVisible","initialScreenSaverBrightness","settingOptions","setting","dayOpacity","dayHourStart","nightOpacity","nightHourStart","blackHourStart","allStateDomains","combineReducers","serverURL","state","action","type","payload","image","isScreenSaverActive","screenSaverBrightness","includes","data","convertToFahrenheit","dropListOpen","undefined","store","createStore","setInterval","axios","get","getState","innerHeight","innerWidth","responseType","response","dispatch","setTimeout","URL","createObjectURL","catch","error","console","fetchData","testURL","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b98148f8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/terrarium-buddies.3158d65c.jpg\";","export default __webpack_public_path__ + \"static/media/frog-logo.61394956.png\";","import React, {useRef, useEffect} from 'react';\nimport { BrowserRouter as Router, Switch, Route, } from \"react-router-dom\";\nimport Readings from './Readings/Readings';\nimport Background from './Background/Background';\nimport ScreenSaver from './Background/ScreenSaver/ScreenSaver';\nimport Menu from './Menu/Menu';\nimport Control from './Control/Control';\nimport Schedule from './Control/Schedule/Schedule';\nimport Climate from './Climate/Climate';\nimport ErrorBar from './Readings/ErrorBar';\nimport Settings from './Settings/Settings';\nimport SensorTest from './Settings/Details/SensorTest';\nimport LogView from './Settings/Details/LogView';\n\n\nimport './App.css';\nimport History from './History/History';\n\n\n\nconst App = () => {\n\n  //ScreenSaver Detection\n  //https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n  const screenSaverRef = useRef();\n  \n  const deactivateScreenSaver = () => { if(screenSaverRef.current) screenSaverRef.current.deactivateScreenSaver(); }\n  useEffect(() => window.addEventListener('scroll', deactivateScreenSaver, false), []); //https://stackoverflow.com/questions/5657292/why-is-false-used-after-this-simple-addeventlistener-function   \n\n  return (<div>Can you se me???</div>\n    // <Router basename={window.location.pathname || ''}>\n    //   <div id=\"App\" className=' border-box' \n    //   onClick={()=>screenSaverRef.current.deactivateScreenSaver()}\n    //   onMouseMove={()=>screenSaverRef.current.deactivateScreenSaver()}\n    //   onWheel={()=>screenSaverRef.current.deactivateScreenSaver()}\n    //   >\n    //     <Background /> \n    //     {/* Screen saver toggle to not render and diable timer is reduct screenSaverBrightness.setting == 'Disabled' */}\n    //     <ScreenSaver ref={screenSaverRef}/>\n            \n    //     {/* <div id='page-box' className=' border-box' style={{ top: 0, padding: '1.0rem', height: `${menuRef.current ?  (window.innerHeight - (menuRef.current.offsetHeight) - 75) : window.innerHeight}px` }}>  */}\n        \n    //       <Switch>\n    //         <Route exact path=\"/\">\n    //         <div id='page-box' className=' border-box' style={{boxSizing: 'border-box'}}>\n    //           <Readings hideDetails={false}/>\n    //           <Menu />\n    //         </div>\n    //         </Route>\n    //         <Route path=\"/controls\">\n    //           <ErrorBar />\n    //           <div id='page-box' className=' border-box' style={{boxSizing: 'border-box'}}>\n    //             <Control/>\n    //             <Menu />\n    //           </div>\n    //         </Route>\n    //         <Route path=\"/schedules\">\n    //           <ErrorBar />\n    //           <div id='page-box' className=' border-box' style={{boxSizing: 'border-box'}}>\n    //             <Schedule/>\n    //             <Menu />\n    //           </div>\n    //         </Route>\n    //         <Route path=\"/climate\">\n    //           <ErrorBar />\n    //           <div id='page-box' className=' border-box' style={{boxSizing: 'border-box'}}>\n    //             <Climate/>\n    //             <Menu />\n    //           </div>\n    //         </Route>\n    //         <Route path=\"/history\">\n    //           <ErrorBar />\n    //           <div id='page-box' className=' border-box' style={{boxSizing: 'border-box'}}>\n    //             <History/>\n    //             <Menu />\n    //           </div>\n    //         </Route>\n    //         <Route path=\"/settings\">\n    //           <ErrorBar />\n    //           <div id='page-box' className=' border-box' style={{boxSizing: 'border-box'}}>\n    //             <Settings deactivateScreenSaver={(d)=>screenSaverRef.current.deactivateScreenSaver(d)}/>\n    //             <Menu />\n    //           </div>\n    //         </Route>\n    //         <Route path=\"/log\">\n    //           <ErrorBar />\n    //           <div id='page-box' className=' border-box' style={{boxSizing: 'border-box'}}>\n    //             <LogView/>\n    //             <Menu />\n    //           </div>\n    //         </Route>\n    //         <Route path=\"/sensor-testing\">\n    //           <ErrorBar />\n    //           <div id='page-box' className=' border-box' style={{boxSizing: 'border-box'}}>\n    //             <SensorTest/>\n    //             <Menu />\n    //           </div>\n    //         </Route>\n    //       </Switch>       \n    //     </div>\n    // </Router>\n    ); //top layer last\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios from 'axios';\nimport{Provider} from 'react-redux';\nimport {createStore, combineReducers} from 'redux';\n\nimport defaultImage from './Background/terrarium-buddies.jpg';\n\n\n\n//Action Creators (manipulate State) => Doing in Component | Traditional Method is to predefine here and import into component, just to send back to reducer\n\n//Single State with one Reducer | Could all be separate with separate reducers and combine with: 'combineReducers'\n\n//Reducers : Perform state Update\nconst setServerURLReducer = (state = '' || '', action) => {\n  if(action.type == 'setServerURL')  return action.payload;\n  else return state;\n}\n\nconst initialImage = {\n  IMAGE_INTERVAL: 6000,\n  TRANSITION_INTERVAL: 1000,\n  SCREENSAVER_INACTIVE_TIME: 60000,\n  location: defaultImage,\n  isVisible: false,  // https://stackoverflow.com/questions/40064249/react-animate-mount-and-unmount-of-a-single-component\n}\nconst setImageReducer = (state = initialImage, action) => {\n  if(action.type == 'setImage') { return {...state, location: action.payload, isVisible: true};}\n  else if(action.type == 'setImageVisible') return {...state, isVisible: true};\n  else if(action.type == 'setImageInvisible') return {...state, isVisible: false};\n  else return state;\n}\nconst screenSaverActiveReducer = (state = true, action) => { //Image Opacity on/off -> transition css\n  if(action.type == 'activateScreenSaver')  return true; \n  else if(action.type == 'deactivateScreenSaver')  return false;\n  else return state;\n}\nconst initialScreenSaverBrightness = {\n  settingOptions: ['Default', 'Scheduled', 'Black', 'Disabled'],\n  setting: 'Default',\n  dayOpacity: 1.00,\n  dayHourStart: 7,\n  nightOpacity: 0.35,\n  nightHourStart: 19,\n  blackHourStart: 21,\n}\nconst ScreenSaverBrightnessReducer = (state = initialScreenSaverBrightness, action) => {\n  switch(action.type) {\n    case 'setting':\n      if(state.settingOptions.includes(action.payload)) return {...state, setting: action.payload};\n      else return state;\n    case 'dayOpacity':\n      return {...state, setting: 'Scheduled', dayOpacity: action.payload};\n    case 'dayHourStart':\n      return {...state, setting: 'Scheduled', dayHourStart: action.payload};\n    case 'nightOpacity':\n      return {...state, setting: 'Scheduled', nightOpacity: action.payload};\n    case 'nightHourStart':\n      return {...state, setting: 'Scheduled', nightHourStart: action.payload};\n    case 'blackHourStart':\n      return {...state, setting: 'Scheduled', blackHourStart: action.payload};\n    default: return state;\n  }\n}\nconst setDataReducer = (state = {}, action) => {\n  if(action.type == 'setData') return {...action.payload};\n  else return state;\n}\n\nconst toggleConvertToFahrenheitReducer = (state = true, action) => { \n  if(action.type == 'toggleConvertToFahrenheit') return !state; \n  else return state;\n}\n\nconst setDropListReducer = (state = 'OFF', action) => { \n  if(action.type == 'setDropList' && state == action.payload) return 'OFF';\n  else if(action.type == 'setDropList' && action.payload == undefined) return 'OFF';  \n  else if(action.type == 'setDropList') return action.payload; \n  else return state;\n}\n\n/*********************\n  Setup Redux Store\n********************/\nconst allStateDomains = combineReducers({\n  serverURL: setServerURLReducer,\n  image: setImageReducer,\n  isScreenSaverActive: screenSaverActiveReducer, \n  screenSaverBrightness: ScreenSaverBrightnessReducer,\n  data: setDataReducer,\n  convertToFahrenheit: toggleConvertToFahrenheitReducer,\n  dropListOpen: setDropListReducer\n});\n\nconst store = createStore(allStateDomains,{});\n\n\n/*********************\n     Fetch Background Image\n********************/\nsetInterval(()=>{//console.log('fetching Image', store.getState().image.image);\n  axios.get(`${store.getState().serverURL}/${(window.innerHeight > window.innerWidth) ? 'image-portrait' : 'image-landscape'}/`, { responseType: \"blob\" })\n  .then((response) => {\n    store.dispatch({type: 'setImageInvisible'});\n    setTimeout(() => {\n      store.dispatch({type: 'setImage', payload: URL.createObjectURL(response.data)});//also sets image viable // CSS transitions\n    \n    }, store.getState().image.TRANSITION_INTERVAL/2);\n  })\n  .catch((error) => {\n      console.error(error);\n      // setImage(defaultImage);\n    });\n}, store.getState().image.IMAGE_INTERVAL+store.getState().image.TRANSITION_INTERVAL || 5000);\n\n/*********************\n     Fetch Data\n********************/\nexport const fetchData = async(testURL)=> {\n  const url = testURL || store.getState().serverURL;\n\n  // return await axios.get(`${url}/data/`, { responseType: \"json\", timeout: testURL ? 500 : undefined })\n  //   .then((res) => {const response = res.data;\n  //     store.dispatch({type: 'setData', payload: response});\n\n  //     store.dispatch({type: 'setServerURL', payload: url});\n  //     localStorage.setItem(\"server\", url);\n\n  //     console.log('Fetching Data Successful: ', url, response);\n  //     setTimeout(()=>fetchData(), response ? (((response.timeNextEvaluation) - new Date().getTime())+30000) : (60*1000));\n  //     return true;\n  //   })\n  //   .catch((error) => {\n  //       console.error('Failed to Fetch Data:', url, error);\n  //       // store.dispatch({type: 'setData'});\n  //     if(!testURL) \n  //       setTimeout(()=>fetchData(), (60*1000));\n  //     return false;\n  //   });\n  return false;\n  }\n\n/**************************************\n Initialization and Find Server URL\n***************************************/\n//Sample URL: https://terrarium-control.tech/?server=70.124.144.161:4750&server=192.168.1.240:4700&redirect=http://192.168.1.240:4700/\nconst start = async() => {\n\nconst redirectURL = /(?<=redirect=).*?(?:(?!&|$).)*/.exec(window.location.search);\nconst serverPramList = window.location.search.match(/(?<=server=).*?(?:(?!\\/|&|$).)*/g);\nlet foundServer = false;\nconsole.log(redirectURL);\nif(serverPramList) {\n  for(let serverPram of serverPramList) { console.log(\"Server Pram:\", serverPram, serverPramList);\n    //Query Parameter HTTPS Secure\n    if(!foundServer && await fetchData(`https://${serverPram}`)) {\n      console.log('HTTPS Query Server Identified:', store.getState().serverURL);\n      foundServer = true;\n      break;\n    }\n\n    //Query Parameter HTTP\n    else if(!foundServer && await fetchData(`http://${serverPram}`)) {\n      console.log('HTTP Query Server Identified:', store.getState().serverURL);\n      foundServer = true;\n      break;\n    } \n  }\n} \n\n  //Local Storage\nif(!foundServer && await fetchData(localStorage.getItem(\"server\"))) {\n      console.log('LocalStorage Server Identified:', store.getState().serverURL);\n  }\n  //Failed: Assign Current URL\nelse if(!foundServer && redirectURL) {\n  window.location.replace(redirectURL[0]);\n}\nif(!foundServer) {\n  console.error('Failed to Identify Server');\n  store.dispatch({type: 'setServerURL', payload: window.location.origin});\n  fetchData(); //Enter Reattempt State\n}\n}\n\n// start();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <div>this is index</div>\n          <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n\n"],"sourceRoot":""}